"use client";

import { useEffect, useState } from "react";
import styles from "./admin-style-news.module.css";
import Image from "next/image";

export default function NewsAdminBlock() {
  const [news, setNews] = useState([]);
  const [form, setForm] = useState({
    title: "",
    content: "",
  });
  const [imageFile, setImageFile] = useState(null);
  const [editingNews, setEditingNews] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
  const fetchNews = async () => {
    try {
      const res = await fetch("/api/news");
      if (!res.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π");
      }
      const data = await res.json();
      setNews(data);
    } catch (error) {
      console.error(error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  const deleteNews = async (id) => {
    const confirmed = confirm("–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å?");
    if (!confirmed) return;

    try {
      const res = await fetch("/api/news", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id }),
      });

      if (!res.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏");
      }
      fetchNews(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    } catch (error) {
      console.error(error);
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
  const handleChange = (e) => {
    const { name, value } = e.target;
    if (editingNews) {
      setEditingNews((prev) => ({ ...prev, [name]: value }));
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setImageFile(file);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!imageFile) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
      return;
    }

    const formData = new FormData();
    formData.append("file", imageFile);

    try {
      const uploadRes = await fetch("/api/uploadImage", {
        method: "POST",
        body: formData,
      });

      const uploadData = await uploadRes.json();
      if (!uploadRes.ok || !uploadData.imageUrl) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
      }

      const res = await fetch("/api/news", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...form, imageUrl: uploadData.imageUrl }),
      });

      if (!res.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏");
      }

      setForm({ title: "", content: "" });
      setImageFile(null);
      fetchNews();
    } catch (error) {
      console.error(error);
      alert(error.message);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
  const handleUpdate = async () => {
    try {
      const res = await fetch("/api/news", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(editingNews),
      });

      if (!res.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏");
      }

      setEditingNews(null);
      fetchNews();
    } catch (error) {
      console.error(error);
      alert(error.message);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchNews();
  }, []);

  return (
    <section className={styles.newsSection}>
      <h2 className={styles.title}>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</h2>
      <form onSubmit={handleSubmit} className={styles.form}>
        <input
          name="title"
          placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
          value={form.title}
          onChange={handleChange}
          required
        />
        <textarea
          name="content"
          placeholder="–ö–æ–Ω—Ç–µ–Ω—Ç"
          value={form.content}
          onChange={handleChange}
          required
        />
        <input
          type="file"
          accept="image/*"
          onChange={handleFileChange}
          required
        />
        <button type="submit">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</button>
      </form>

      <h2 className={styles.title}>–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π</h2>
      <div className={styles.newsGrid}>
        {news.length > 0 ? (
          news.map((item) => (
            <div key={item.id} className={styles.card}>
              <Image
                src={item.imageUrl}
                alt={item.title}
                width={400}
                height={200}
              />
              <div className={styles.cardContent}>
                <h3>{item.title}</h3>
                <p>{item.content}</p>
                <p>{new Date(item.createdAt).toLocaleDateString()}</p>

                <button
                  className={styles.deleteButton}
                  onClick={() => setEditingNews(item)}
                >
                  ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button
                  className={styles.deleteButton}
                  onClick={() => deleteNews(item.id)}
                >
                  üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))
        ) : (
          <p>–ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
        )}
      </div>

      {editingNews && (
        <div className={styles.editForm}>
          <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å</h3>
          <input
            name="title"
            placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
            value={editingNews.title}
            onChange={handleChange}
          />
          <textarea
            name="content"
            placeholder="–ö–æ–Ω—Ç–µ–Ω—Ç"
            value={editingNews.content}
            onChange={handleChange}
          />
          <div className={styles.editFormButtons}>
            <button className={styles.moreBtn} onClick={handleUpdate}>
              üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
            <button
              className={styles.moreBtn}
              onClick={() => setEditingNews(null)}
            >
              ‚ùå –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      )}
    </section>
  );
}
